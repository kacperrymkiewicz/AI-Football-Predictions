//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: UserRegisterDto | undefined): Observable<Int32ServiceResponse> {
        let url_ = this.baseUrl + "/api/Authentication/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "json",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Int32ServiceResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Int32ServiceResponse>;
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<Int32ServiceResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Int32ServiceResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: UserLoginDto | undefined): Observable<StringServiceResponse> {
        let url_ = this.baseUrl + "/api/Authentication/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "json",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StringServiceResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StringServiceResponse>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<StringServiceResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringServiceResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets the list of live football matches
     * @return OK
     */
    getLiveMatches(): Observable<SportradarResponse> {
        let url_ = this.baseUrl + "/api/Matches/Live";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "json",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLiveMatches(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLiveMatches(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SportradarResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SportradarResponse>;
        }));
    }

    protected processGetLiveMatches(response: HttpResponseBase): Observable<SportradarResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SportradarResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets match details
     * @return OK
     */
    getMatchDetails(id: number): Observable<SportradarMatchDetailsResponse> {
        let url_ = this.baseUrl + "/api/Matches/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "json",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMatchDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMatchDetails(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SportradarMatchDetailsResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SportradarMatchDetailsResponse>;
        }));
    }

    protected processGetMatchDetails(response: HttpResponseBase): Observable<SportradarMatchDetailsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SportradarMatchDetailsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets head2head matches by matchId
     * @return OK
     */
    getH2hMatches(id: number): Observable<SportradarHead2HeadResponse> {
        let url_ = this.baseUrl + "/api/Matches/{id}/Head2head";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "json",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetH2hMatches(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetH2hMatches(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SportradarHead2HeadResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SportradarHead2HeadResponse>;
        }));
    }

    protected processGetH2hMatches(response: HttpResponseBase): Observable<SportradarHead2HeadResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SportradarHead2HeadResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ActionButton implements IActionButton {
    link?: string | undefined;
    label?: string | undefined;

    constructor(data?: IActionButton) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.link = _data["link"];
            this.label = _data["label"];
        }
    }

    static fromJS(data: any): ActionButton {
        data = typeof data === 'object' ? data : {};
        let result = new ActionButton();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["link"] = this.link;
        data["label"] = this.label;
        return data;
    }
}

export interface IActionButton {
    link?: string | undefined;
    label?: string | undefined;
}

export class AwayCompetitor implements IAwayCompetitor {
    id?: number;
    countryId?: number;
    sportId?: number;
    name?: string | undefined;
    symbolicName?: string | undefined;
    score?: number;
    isQualified?: boolean;
    toQualify?: boolean;
    isWinner?: boolean;
    redCards?: number;
    nameForURL?: string | undefined;
    type?: number;
    popularityRank?: number;
    imageVersion?: number;
    color?: string | undefined;
    mainCompetitionId?: number;
    hasSquad?: boolean;
    hasTransfers?: boolean;
    competitorNum?: number;
    hideOnSearch?: boolean;
    hideOnCatalog?: boolean;
    shortName?: string | undefined;
    longName?: string | undefined;
    logo?: string | undefined;
    recentGames?: RecentGame[] | undefined;

    constructor(data?: IAwayCompetitor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.countryId = _data["countryId"];
            this.sportId = _data["sportId"];
            this.name = _data["name"];
            this.symbolicName = _data["symbolicName"];
            this.score = _data["score"];
            this.isQualified = _data["isQualified"];
            this.toQualify = _data["toQualify"];
            this.isWinner = _data["isWinner"];
            this.redCards = _data["redCards"];
            this.nameForURL = _data["nameForURL"];
            this.type = _data["type"];
            this.popularityRank = _data["popularityRank"];
            this.imageVersion = _data["imageVersion"];
            this.color = _data["color"];
            this.mainCompetitionId = _data["mainCompetitionId"];
            this.hasSquad = _data["hasSquad"];
            this.hasTransfers = _data["hasTransfers"];
            this.competitorNum = _data["competitorNum"];
            this.hideOnSearch = _data["hideOnSearch"];
            this.hideOnCatalog = _data["hideOnCatalog"];
            this.shortName = _data["shortName"];
            this.longName = _data["longName"];
            this.logo = _data["logo"];
            if (Array.isArray(_data["recentGames"])) {
                this.recentGames = [] as any;
                for (let item of _data["recentGames"])
                    this.recentGames!.push(RecentGame.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AwayCompetitor {
        data = typeof data === 'object' ? data : {};
        let result = new AwayCompetitor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["countryId"] = this.countryId;
        data["sportId"] = this.sportId;
        data["name"] = this.name;
        data["symbolicName"] = this.symbolicName;
        data["score"] = this.score;
        data["isQualified"] = this.isQualified;
        data["toQualify"] = this.toQualify;
        data["isWinner"] = this.isWinner;
        data["redCards"] = this.redCards;
        data["nameForURL"] = this.nameForURL;
        data["type"] = this.type;
        data["popularityRank"] = this.popularityRank;
        data["imageVersion"] = this.imageVersion;
        data["color"] = this.color;
        data["mainCompetitionId"] = this.mainCompetitionId;
        data["hasSquad"] = this.hasSquad;
        data["hasTransfers"] = this.hasTransfers;
        data["competitorNum"] = this.competitorNum;
        data["hideOnSearch"] = this.hideOnSearch;
        data["hideOnCatalog"] = this.hideOnCatalog;
        data["shortName"] = this.shortName;
        data["longName"] = this.longName;
        data["logo"] = this.logo;
        if (Array.isArray(this.recentGames)) {
            data["recentGames"] = [];
            for (let item of this.recentGames)
                data["recentGames"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAwayCompetitor {
    id?: number;
    countryId?: number;
    sportId?: number;
    name?: string | undefined;
    symbolicName?: string | undefined;
    score?: number;
    isQualified?: boolean;
    toQualify?: boolean;
    isWinner?: boolean;
    redCards?: number;
    nameForURL?: string | undefined;
    type?: number;
    popularityRank?: number;
    imageVersion?: number;
    color?: string | undefined;
    mainCompetitionId?: number;
    hasSquad?: boolean;
    hasTransfers?: boolean;
    competitorNum?: number;
    hideOnSearch?: boolean;
    hideOnCatalog?: boolean;
    shortName?: string | undefined;
    longName?: string | undefined;
    logo?: string | undefined;
    recentGames?: RecentGame[] | undefined;
}

export class Bookmaker implements IBookmaker {
    id?: number;
    name?: string | undefined;
    link?: string | undefined;
    nameForURL?: string | undefined;
    actionButton?: ActionButton;
    color?: string | undefined;
    imageVersion?: number;

    constructor(data?: IBookmaker) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.link = _data["link"];
            this.nameForURL = _data["nameForURL"];
            this.actionButton = _data["actionButton"] ? ActionButton.fromJS(_data["actionButton"]) : <any>undefined;
            this.color = _data["color"];
            this.imageVersion = _data["imageVersion"];
        }
    }

    static fromJS(data: any): Bookmaker {
        data = typeof data === 'object' ? data : {};
        let result = new Bookmaker();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["link"] = this.link;
        data["nameForURL"] = this.nameForURL;
        data["actionButton"] = this.actionButton ? this.actionButton.toJSON() : <any>undefined;
        data["color"] = this.color;
        data["imageVersion"] = this.imageVersion;
        return data;
    }
}

export interface IBookmaker {
    id?: number;
    name?: string | undefined;
    link?: string | undefined;
    nameForURL?: string | undefined;
    actionButton?: ActionButton;
    color?: string | undefined;
    imageVersion?: number;
}

export class Competition implements ICompetition {
    id?: number;
    countryId?: number;
    sportId?: number;
    name?: string | undefined;
    hasStandings?: boolean;
    hasBrackets?: boolean;
    nameForURL?: string | undefined;
    totalGames?: number;
    liveGames?: number;
    popularityRank?: number;
    hasActiveGames?: boolean;
    imageVersion?: number;
    currentStageType?: number;
    color?: string | undefined;
    competitorsType?: number;
    currentPhaseNum?: number;
    currentSeasonNum?: number;
    currentStageNum?: number;
    hideOnCatalog?: boolean;
    hideOnSearch?: boolean;
    isInternational?: boolean;
    hasLiveStandings?: boolean | undefined;
    hasStandingsGroups?: boolean | undefined;

    constructor(data?: ICompetition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.countryId = _data["countryId"];
            this.sportId = _data["sportId"];
            this.name = _data["name"];
            this.hasStandings = _data["hasStandings"];
            this.hasBrackets = _data["hasBrackets"];
            this.nameForURL = _data["nameForURL"];
            this.totalGames = _data["totalGames"];
            this.liveGames = _data["liveGames"];
            this.popularityRank = _data["popularityRank"];
            this.hasActiveGames = _data["hasActiveGames"];
            this.imageVersion = _data["imageVersion"];
            this.currentStageType = _data["currentStageType"];
            this.color = _data["color"];
            this.competitorsType = _data["competitorsType"];
            this.currentPhaseNum = _data["currentPhaseNum"];
            this.currentSeasonNum = _data["currentSeasonNum"];
            this.currentStageNum = _data["currentStageNum"];
            this.hideOnCatalog = _data["hideOnCatalog"];
            this.hideOnSearch = _data["hideOnSearch"];
            this.isInternational = _data["isInternational"];
            this.hasLiveStandings = _data["hasLiveStandings"];
            this.hasStandingsGroups = _data["hasStandingsGroups"];
        }
    }

    static fromJS(data: any): Competition {
        data = typeof data === 'object' ? data : {};
        let result = new Competition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["countryId"] = this.countryId;
        data["sportId"] = this.sportId;
        data["name"] = this.name;
        data["hasStandings"] = this.hasStandings;
        data["hasBrackets"] = this.hasBrackets;
        data["nameForURL"] = this.nameForURL;
        data["totalGames"] = this.totalGames;
        data["liveGames"] = this.liveGames;
        data["popularityRank"] = this.popularityRank;
        data["hasActiveGames"] = this.hasActiveGames;
        data["imageVersion"] = this.imageVersion;
        data["currentStageType"] = this.currentStageType;
        data["color"] = this.color;
        data["competitorsType"] = this.competitorsType;
        data["currentPhaseNum"] = this.currentPhaseNum;
        data["currentSeasonNum"] = this.currentSeasonNum;
        data["currentStageNum"] = this.currentStageNum;
        data["hideOnCatalog"] = this.hideOnCatalog;
        data["hideOnSearch"] = this.hideOnSearch;
        data["isInternational"] = this.isInternational;
        data["hasLiveStandings"] = this.hasLiveStandings;
        data["hasStandingsGroups"] = this.hasStandingsGroups;
        return data;
    }
}

export interface ICompetition {
    id?: number;
    countryId?: number;
    sportId?: number;
    name?: string | undefined;
    hasStandings?: boolean;
    hasBrackets?: boolean;
    nameForURL?: string | undefined;
    totalGames?: number;
    liveGames?: number;
    popularityRank?: number;
    hasActiveGames?: boolean;
    imageVersion?: number;
    currentStageType?: number;
    color?: string | undefined;
    competitorsType?: number;
    currentPhaseNum?: number;
    currentSeasonNum?: number;
    currentStageNum?: number;
    hideOnCatalog?: boolean;
    hideOnSearch?: boolean;
    isInternational?: boolean;
    hasLiveStandings?: boolean | undefined;
    hasStandingsGroups?: boolean | undefined;
}

export class Competitor implements ICompetitor {
    id?: number;
    countryId?: number;
    sportId?: number;
    name?: string | undefined;
    symbolicName?: string | undefined;
    nameForURL?: string | undefined;
    type?: number;
    popularityRank?: number;
    imageVersion?: number;
    color?: string | undefined;
    mainCompetitionId?: number;
    hasSquad?: boolean;
    hasTransfers?: boolean;
    competitorNum?: number;
    hideOnSearch?: boolean;
    hideOnCatalog?: boolean;
    shortName?: string | undefined;
    longName?: string | undefined;

    constructor(data?: ICompetitor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.countryId = _data["countryId"];
            this.sportId = _data["sportId"];
            this.name = _data["name"];
            this.symbolicName = _data["symbolicName"];
            this.nameForURL = _data["nameForURL"];
            this.type = _data["type"];
            this.popularityRank = _data["popularityRank"];
            this.imageVersion = _data["imageVersion"];
            this.color = _data["color"];
            this.mainCompetitionId = _data["mainCompetitionId"];
            this.hasSquad = _data["hasSquad"];
            this.hasTransfers = _data["hasTransfers"];
            this.competitorNum = _data["competitorNum"];
            this.hideOnSearch = _data["hideOnSearch"];
            this.hideOnCatalog = _data["hideOnCatalog"];
            this.shortName = _data["shortName"];
            this.longName = _data["longName"];
        }
    }

    static fromJS(data: any): Competitor {
        data = typeof data === 'object' ? data : {};
        let result = new Competitor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["countryId"] = this.countryId;
        data["sportId"] = this.sportId;
        data["name"] = this.name;
        data["symbolicName"] = this.symbolicName;
        data["nameForURL"] = this.nameForURL;
        data["type"] = this.type;
        data["popularityRank"] = this.popularityRank;
        data["imageVersion"] = this.imageVersion;
        data["color"] = this.color;
        data["mainCompetitionId"] = this.mainCompetitionId;
        data["hasSquad"] = this.hasSquad;
        data["hasTransfers"] = this.hasTransfers;
        data["competitorNum"] = this.competitorNum;
        data["hideOnSearch"] = this.hideOnSearch;
        data["hideOnCatalog"] = this.hideOnCatalog;
        data["shortName"] = this.shortName;
        data["longName"] = this.longName;
        return data;
    }
}

export interface ICompetitor {
    id?: number;
    countryId?: number;
    sportId?: number;
    name?: string | undefined;
    symbolicName?: string | undefined;
    nameForURL?: string | undefined;
    type?: number;
    popularityRank?: number;
    imageVersion?: number;
    color?: string | undefined;
    mainCompetitionId?: number;
    hasSquad?: boolean;
    hasTransfers?: boolean;
    competitorNum?: number;
    hideOnSearch?: boolean;
    hideOnCatalog?: boolean;
    shortName?: string | undefined;
    longName?: string | undefined;
}

export class Country implements ICountry {
    id?: number;
    name?: string | undefined;
    totalGames?: number;
    liveGames?: number;
    nameForURL?: string | undefined;
    imageVersion?: number;

    constructor(data?: ICountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.totalGames = _data["totalGames"];
            this.liveGames = _data["liveGames"];
            this.nameForURL = _data["nameForURL"];
            this.imageVersion = _data["imageVersion"];
        }
    }

    static fromJS(data: any): Country {
        data = typeof data === 'object' ? data : {};
        let result = new Country();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["totalGames"] = this.totalGames;
        data["liveGames"] = this.liveGames;
        data["nameForURL"] = this.nameForURL;
        data["imageVersion"] = this.imageVersion;
        return data;
    }
}

export interface ICountry {
    id?: number;
    name?: string | undefined;
    totalGames?: number;
    liveGames?: number;
    nameForURL?: string | undefined;
    imageVersion?: number;
}

export class ExtraDatum implements IExtraDatum {
    num?: number;
    text?: string | undefined;

    constructor(data?: IExtraDatum) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.num = _data["num"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): ExtraDatum {
        data = typeof data === 'object' ? data : {};
        let result = new ExtraDatum();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["num"] = this.num;
        data["text"] = this.text;
        return data;
    }
}

export interface IExtraDatum {
    num?: number;
    text?: string | undefined;
}

export class Game implements IGame {
    id?: number;
    sportId?: number;
    competitionId?: number;
    seasonNum?: number;
    stageNum?: number;
    roundNum?: number;
    roundName?: string | undefined;
    competitionDisplayName?: string | undefined;
    startTime?: Date;
    statusGroup?: number;
    statusText?: string | undefined;
    shortStatusText?: string | undefined;
    gameTimeAndStatusDisplayType?: number;
    justEnded?: boolean;
    gameTime?: number;
    gameTimeDisplay?: string | undefined;
    hasLineups?: boolean;
    hasMissingPlayers?: boolean;
    hasFieldPositions?: boolean;
    hasTVNetworks?: boolean;
    odds?: Odds;
    homeCompetitor?: HomeCompetitor;
    awayCompetitor?: AwayCompetitor;
    isHomeAwayInverted?: boolean;
    hasStats?: boolean;
    hasStandings?: boolean;
    standingsName?: string | undefined;
    hasBrackets?: boolean;
    hasPreviousMeetings?: boolean;
    hasRecentMatches?: boolean;
    hasBets?: boolean;
    hasPlayerBets?: boolean;
    winner?: number;
    homeAwayTeamOrder?: number;
    hasNews?: boolean;
    showCountdown?: boolean | undefined;
    h2hGames?: H2hGame[] | undefined;

    constructor(data?: IGame) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sportId = _data["sportId"];
            this.competitionId = _data["competitionId"];
            this.seasonNum = _data["seasonNum"];
            this.stageNum = _data["stageNum"];
            this.roundNum = _data["roundNum"];
            this.roundName = _data["roundName"];
            this.competitionDisplayName = _data["competitionDisplayName"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
            this.statusGroup = _data["statusGroup"];
            this.statusText = _data["statusText"];
            this.shortStatusText = _data["shortStatusText"];
            this.gameTimeAndStatusDisplayType = _data["gameTimeAndStatusDisplayType"];
            this.justEnded = _data["justEnded"];
            this.gameTime = _data["gameTime"];
            this.gameTimeDisplay = _data["gameTimeDisplay"];
            this.hasLineups = _data["hasLineups"];
            this.hasMissingPlayers = _data["hasMissingPlayers"];
            this.hasFieldPositions = _data["hasFieldPositions"];
            this.hasTVNetworks = _data["hasTVNetworks"];
            this.odds = _data["odds"] ? Odds.fromJS(_data["odds"]) : <any>undefined;
            this.homeCompetitor = _data["homeCompetitor"] ? HomeCompetitor.fromJS(_data["homeCompetitor"]) : <any>undefined;
            this.awayCompetitor = _data["awayCompetitor"] ? AwayCompetitor.fromJS(_data["awayCompetitor"]) : <any>undefined;
            this.isHomeAwayInverted = _data["isHomeAwayInverted"];
            this.hasStats = _data["hasStats"];
            this.hasStandings = _data["hasStandings"];
            this.standingsName = _data["standingsName"];
            this.hasBrackets = _data["hasBrackets"];
            this.hasPreviousMeetings = _data["hasPreviousMeetings"];
            this.hasRecentMatches = _data["hasRecentMatches"];
            this.hasBets = _data["hasBets"];
            this.hasPlayerBets = _data["hasPlayerBets"];
            this.winner = _data["winner"];
            this.homeAwayTeamOrder = _data["homeAwayTeamOrder"];
            this.hasNews = _data["hasNews"];
            this.showCountdown = _data["showCountdown"];
            if (Array.isArray(_data["h2hGames"])) {
                this.h2hGames = [] as any;
                for (let item of _data["h2hGames"])
                    this.h2hGames!.push(H2hGame.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Game {
        data = typeof data === 'object' ? data : {};
        let result = new Game();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sportId"] = this.sportId;
        data["competitionId"] = this.competitionId;
        data["seasonNum"] = this.seasonNum;
        data["stageNum"] = this.stageNum;
        data["roundNum"] = this.roundNum;
        data["roundName"] = this.roundName;
        data["competitionDisplayName"] = this.competitionDisplayName;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["statusGroup"] = this.statusGroup;
        data["statusText"] = this.statusText;
        data["shortStatusText"] = this.shortStatusText;
        data["gameTimeAndStatusDisplayType"] = this.gameTimeAndStatusDisplayType;
        data["justEnded"] = this.justEnded;
        data["gameTime"] = this.gameTime;
        data["gameTimeDisplay"] = this.gameTimeDisplay;
        data["hasLineups"] = this.hasLineups;
        data["hasMissingPlayers"] = this.hasMissingPlayers;
        data["hasFieldPositions"] = this.hasFieldPositions;
        data["hasTVNetworks"] = this.hasTVNetworks;
        data["odds"] = this.odds ? this.odds.toJSON() : <any>undefined;
        data["homeCompetitor"] = this.homeCompetitor ? this.homeCompetitor.toJSON() : <any>undefined;
        data["awayCompetitor"] = this.awayCompetitor ? this.awayCompetitor.toJSON() : <any>undefined;
        data["isHomeAwayInverted"] = this.isHomeAwayInverted;
        data["hasStats"] = this.hasStats;
        data["hasStandings"] = this.hasStandings;
        data["standingsName"] = this.standingsName;
        data["hasBrackets"] = this.hasBrackets;
        data["hasPreviousMeetings"] = this.hasPreviousMeetings;
        data["hasRecentMatches"] = this.hasRecentMatches;
        data["hasBets"] = this.hasBets;
        data["hasPlayerBets"] = this.hasPlayerBets;
        data["winner"] = this.winner;
        data["homeAwayTeamOrder"] = this.homeAwayTeamOrder;
        data["hasNews"] = this.hasNews;
        data["showCountdown"] = this.showCountdown;
        if (Array.isArray(this.h2hGames)) {
            data["h2hGames"] = [];
            for (let item of this.h2hGames)
                data["h2hGames"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGame {
    id?: number;
    sportId?: number;
    competitionId?: number;
    seasonNum?: number;
    stageNum?: number;
    roundNum?: number;
    roundName?: string | undefined;
    competitionDisplayName?: string | undefined;
    startTime?: Date;
    statusGroup?: number;
    statusText?: string | undefined;
    shortStatusText?: string | undefined;
    gameTimeAndStatusDisplayType?: number;
    justEnded?: boolean;
    gameTime?: number;
    gameTimeDisplay?: string | undefined;
    hasLineups?: boolean;
    hasMissingPlayers?: boolean;
    hasFieldPositions?: boolean;
    hasTVNetworks?: boolean;
    odds?: Odds;
    homeCompetitor?: HomeCompetitor;
    awayCompetitor?: AwayCompetitor;
    isHomeAwayInverted?: boolean;
    hasStats?: boolean;
    hasStandings?: boolean;
    standingsName?: string | undefined;
    hasBrackets?: boolean;
    hasPreviousMeetings?: boolean;
    hasRecentMatches?: boolean;
    hasBets?: boolean;
    hasPlayerBets?: boolean;
    winner?: number;
    homeAwayTeamOrder?: number;
    hasNews?: boolean;
    showCountdown?: boolean | undefined;
    h2hGames?: H2hGame[] | undefined;
}

export class H2hGame implements IH2hGame {
    id?: number;
    sportId?: number;
    competitionId?: number;
    seasonNum?: number;
    stageNum?: number;
    groupNum?: number;
    stageName?: string | undefined;
    competitionDisplayName?: string | undefined;
    startTime?: Date;
    statusGroup?: number;
    statusText?: string | undefined;
    shortStatusText?: string | undefined;
    gameTimeAndStatusDisplayType?: number;
    justEnded?: boolean;
    gameTime?: number;
    gameTimeDisplay?: string | undefined;
    hasTVNetworks?: boolean;
    aggregateText?: string | undefined;
    shortAggregateText?: string | undefined;
    homeCompetitor?: HomeCompetitor;
    awayCompetitor?: AwayCompetitor;
    isHomeAwayInverted?: boolean;
    hasStandings?: boolean;
    standingsName?: string | undefined;
    hasBrackets?: boolean;
    hasPreviousMeetings?: boolean;
    hasRecentMatches?: boolean;
    winner?: number;
    homeAwayTeamOrder?: number;
    hasPointByPoint?: boolean;
    scores?: number[] | undefined;
    roundNum?: number | undefined;

    constructor(data?: IH2hGame) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sportId = _data["sportId"];
            this.competitionId = _data["competitionId"];
            this.seasonNum = _data["seasonNum"];
            this.stageNum = _data["stageNum"];
            this.groupNum = _data["groupNum"];
            this.stageName = _data["stageName"];
            this.competitionDisplayName = _data["competitionDisplayName"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
            this.statusGroup = _data["statusGroup"];
            this.statusText = _data["statusText"];
            this.shortStatusText = _data["shortStatusText"];
            this.gameTimeAndStatusDisplayType = _data["gameTimeAndStatusDisplayType"];
            this.justEnded = _data["justEnded"];
            this.gameTime = _data["gameTime"];
            this.gameTimeDisplay = _data["gameTimeDisplay"];
            this.hasTVNetworks = _data["hasTVNetworks"];
            this.aggregateText = _data["aggregateText"];
            this.shortAggregateText = _data["shortAggregateText"];
            this.homeCompetitor = _data["homeCompetitor"] ? HomeCompetitor.fromJS(_data["homeCompetitor"]) : <any>undefined;
            this.awayCompetitor = _data["awayCompetitor"] ? AwayCompetitor.fromJS(_data["awayCompetitor"]) : <any>undefined;
            this.isHomeAwayInverted = _data["isHomeAwayInverted"];
            this.hasStandings = _data["hasStandings"];
            this.standingsName = _data["standingsName"];
            this.hasBrackets = _data["hasBrackets"];
            this.hasPreviousMeetings = _data["hasPreviousMeetings"];
            this.hasRecentMatches = _data["hasRecentMatches"];
            this.winner = _data["winner"];
            this.homeAwayTeamOrder = _data["homeAwayTeamOrder"];
            this.hasPointByPoint = _data["hasPointByPoint"];
            if (Array.isArray(_data["scores"])) {
                this.scores = [] as any;
                for (let item of _data["scores"])
                    this.scores!.push(item);
            }
            this.roundNum = _data["roundNum"];
        }
    }

    static fromJS(data: any): H2hGame {
        data = typeof data === 'object' ? data : {};
        let result = new H2hGame();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sportId"] = this.sportId;
        data["competitionId"] = this.competitionId;
        data["seasonNum"] = this.seasonNum;
        data["stageNum"] = this.stageNum;
        data["groupNum"] = this.groupNum;
        data["stageName"] = this.stageName;
        data["competitionDisplayName"] = this.competitionDisplayName;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["statusGroup"] = this.statusGroup;
        data["statusText"] = this.statusText;
        data["shortStatusText"] = this.shortStatusText;
        data["gameTimeAndStatusDisplayType"] = this.gameTimeAndStatusDisplayType;
        data["justEnded"] = this.justEnded;
        data["gameTime"] = this.gameTime;
        data["gameTimeDisplay"] = this.gameTimeDisplay;
        data["hasTVNetworks"] = this.hasTVNetworks;
        data["aggregateText"] = this.aggregateText;
        data["shortAggregateText"] = this.shortAggregateText;
        data["homeCompetitor"] = this.homeCompetitor ? this.homeCompetitor.toJSON() : <any>undefined;
        data["awayCompetitor"] = this.awayCompetitor ? this.awayCompetitor.toJSON() : <any>undefined;
        data["isHomeAwayInverted"] = this.isHomeAwayInverted;
        data["hasStandings"] = this.hasStandings;
        data["standingsName"] = this.standingsName;
        data["hasBrackets"] = this.hasBrackets;
        data["hasPreviousMeetings"] = this.hasPreviousMeetings;
        data["hasRecentMatches"] = this.hasRecentMatches;
        data["winner"] = this.winner;
        data["homeAwayTeamOrder"] = this.homeAwayTeamOrder;
        data["hasPointByPoint"] = this.hasPointByPoint;
        if (Array.isArray(this.scores)) {
            data["scores"] = [];
            for (let item of this.scores)
                data["scores"].push(item);
        }
        data["roundNum"] = this.roundNum;
        return data;
    }
}

export interface IH2hGame {
    id?: number;
    sportId?: number;
    competitionId?: number;
    seasonNum?: number;
    stageNum?: number;
    groupNum?: number;
    stageName?: string | undefined;
    competitionDisplayName?: string | undefined;
    startTime?: Date;
    statusGroup?: number;
    statusText?: string | undefined;
    shortStatusText?: string | undefined;
    gameTimeAndStatusDisplayType?: number;
    justEnded?: boolean;
    gameTime?: number;
    gameTimeDisplay?: string | undefined;
    hasTVNetworks?: boolean;
    aggregateText?: string | undefined;
    shortAggregateText?: string | undefined;
    homeCompetitor?: HomeCompetitor;
    awayCompetitor?: AwayCompetitor;
    isHomeAwayInverted?: boolean;
    hasStandings?: boolean;
    standingsName?: string | undefined;
    hasBrackets?: boolean;
    hasPreviousMeetings?: boolean;
    hasRecentMatches?: boolean;
    winner?: number;
    homeAwayTeamOrder?: number;
    hasPointByPoint?: boolean;
    scores?: number[] | undefined;
    roundNum?: number | undefined;
}

export class HomeCompetitor implements IHomeCompetitor {
    id?: number;
    countryId?: number;
    sportId?: number;
    name?: string | undefined;
    symbolicName?: string | undefined;
    score?: number;
    isQualified?: boolean;
    toQualify?: boolean;
    isWinner?: boolean;
    redCards?: number;
    nameForURL?: string | undefined;
    type?: number;
    popularityRank?: number;
    imageVersion?: number;
    color?: string | undefined;
    mainCompetitionId?: number;
    hasSquad?: boolean;
    hasTransfers?: boolean;
    competitorNum?: number;
    hideOnSearch?: boolean;
    hideOnCatalog?: boolean;
    shortName?: string | undefined;
    longName?: string | undefined;
    logo?: string | undefined;
    recentGames?: RecentGame[] | undefined;

    constructor(data?: IHomeCompetitor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.countryId = _data["countryId"];
            this.sportId = _data["sportId"];
            this.name = _data["name"];
            this.symbolicName = _data["symbolicName"];
            this.score = _data["score"];
            this.isQualified = _data["isQualified"];
            this.toQualify = _data["toQualify"];
            this.isWinner = _data["isWinner"];
            this.redCards = _data["redCards"];
            this.nameForURL = _data["nameForURL"];
            this.type = _data["type"];
            this.popularityRank = _data["popularityRank"];
            this.imageVersion = _data["imageVersion"];
            this.color = _data["color"];
            this.mainCompetitionId = _data["mainCompetitionId"];
            this.hasSquad = _data["hasSquad"];
            this.hasTransfers = _data["hasTransfers"];
            this.competitorNum = _data["competitorNum"];
            this.hideOnSearch = _data["hideOnSearch"];
            this.hideOnCatalog = _data["hideOnCatalog"];
            this.shortName = _data["shortName"];
            this.longName = _data["longName"];
            this.logo = _data["logo"];
            if (Array.isArray(_data["recentGames"])) {
                this.recentGames = [] as any;
                for (let item of _data["recentGames"])
                    this.recentGames!.push(RecentGame.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HomeCompetitor {
        data = typeof data === 'object' ? data : {};
        let result = new HomeCompetitor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["countryId"] = this.countryId;
        data["sportId"] = this.sportId;
        data["name"] = this.name;
        data["symbolicName"] = this.symbolicName;
        data["score"] = this.score;
        data["isQualified"] = this.isQualified;
        data["toQualify"] = this.toQualify;
        data["isWinner"] = this.isWinner;
        data["redCards"] = this.redCards;
        data["nameForURL"] = this.nameForURL;
        data["type"] = this.type;
        data["popularityRank"] = this.popularityRank;
        data["imageVersion"] = this.imageVersion;
        data["color"] = this.color;
        data["mainCompetitionId"] = this.mainCompetitionId;
        data["hasSquad"] = this.hasSquad;
        data["hasTransfers"] = this.hasTransfers;
        data["competitorNum"] = this.competitorNum;
        data["hideOnSearch"] = this.hideOnSearch;
        data["hideOnCatalog"] = this.hideOnCatalog;
        data["shortName"] = this.shortName;
        data["longName"] = this.longName;
        data["logo"] = this.logo;
        if (Array.isArray(this.recentGames)) {
            data["recentGames"] = [];
            for (let item of this.recentGames)
                data["recentGames"].push(item.toJSON());
        }
        return data;
    }
}

export interface IHomeCompetitor {
    id?: number;
    countryId?: number;
    sportId?: number;
    name?: string | undefined;
    symbolicName?: string | undefined;
    score?: number;
    isQualified?: boolean;
    toQualify?: boolean;
    isWinner?: boolean;
    redCards?: number;
    nameForURL?: string | undefined;
    type?: number;
    popularityRank?: number;
    imageVersion?: number;
    color?: string | undefined;
    mainCompetitionId?: number;
    hasSquad?: boolean;
    hasTransfers?: boolean;
    competitorNum?: number;
    hideOnSearch?: boolean;
    hideOnCatalog?: boolean;
    shortName?: string | undefined;
    longName?: string | undefined;
    logo?: string | undefined;
    recentGames?: RecentGame[] | undefined;
}

export class Int32ServiceResponse implements IInt32ServiceResponse {
    data?: number;
    success?: boolean;
    message?: string | undefined;

    constructor(data?: IInt32ServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.success = _data["success"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Int32ServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new Int32ServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["success"] = this.success;
        data["message"] = this.message;
        return data;
    }
}

export interface IInt32ServiceResponse {
    data?: number;
    success?: boolean;
    message?: string | undefined;
}

export class LineType implements ILineType {
    id?: number;
    name?: string | undefined;
    title?: string | undefined;
    internalOptionType?: number;

    constructor(data?: ILineType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.title = _data["title"];
            this.internalOptionType = _data["internalOptionType"];
        }
    }

    static fromJS(data: any): LineType {
        data = typeof data === 'object' ? data : {};
        let result = new LineType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["title"] = this.title;
        data["internalOptionType"] = this.internalOptionType;
        return data;
    }
}

export interface ILineType {
    id?: number;
    name?: string | undefined;
    title?: string | undefined;
    internalOptionType?: number;
}

export class Odds implements IOdds {
    lineId?: number;
    gameId?: number;
    bookmakerId?: number;
    lineTypeId?: number;
    lineType?: LineType;
    link?: string | undefined;
    bookmaker?: Bookmaker;
    options?: Option[] | undefined;

    constructor(data?: IOdds) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lineId = _data["lineId"];
            this.gameId = _data["gameId"];
            this.bookmakerId = _data["bookmakerId"];
            this.lineTypeId = _data["lineTypeId"];
            this.lineType = _data["lineType"] ? LineType.fromJS(_data["lineType"]) : <any>undefined;
            this.link = _data["link"];
            this.bookmaker = _data["bookmaker"] ? Bookmaker.fromJS(_data["bookmaker"]) : <any>undefined;
            if (Array.isArray(_data["options"])) {
                this.options = [] as any;
                for (let item of _data["options"])
                    this.options!.push(Option.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Odds {
        data = typeof data === 'object' ? data : {};
        let result = new Odds();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lineId"] = this.lineId;
        data["gameId"] = this.gameId;
        data["bookmakerId"] = this.bookmakerId;
        data["lineTypeId"] = this.lineTypeId;
        data["lineType"] = this.lineType ? this.lineType.toJSON() : <any>undefined;
        data["link"] = this.link;
        data["bookmaker"] = this.bookmaker ? this.bookmaker.toJSON() : <any>undefined;
        if (Array.isArray(this.options)) {
            data["options"] = [];
            for (let item of this.options)
                data["options"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOdds {
    lineId?: number;
    gameId?: number;
    bookmakerId?: number;
    lineTypeId?: number;
    lineType?: LineType;
    link?: string | undefined;
    bookmaker?: Bookmaker;
    options?: Option[] | undefined;
}

export class OldRate implements IOldRate {
    decimal?: number;
    fractional?: string | undefined;
    american?: string | undefined;

    constructor(data?: IOldRate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.decimal = _data["decimal"];
            this.fractional = _data["fractional"];
            this.american = _data["american"];
        }
    }

    static fromJS(data: any): OldRate {
        data = typeof data === 'object' ? data : {};
        let result = new OldRate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["decimal"] = this.decimal;
        data["fractional"] = this.fractional;
        data["american"] = this.american;
        return data;
    }
}

export interface IOldRate {
    decimal?: number;
    fractional?: string | undefined;
    american?: string | undefined;
}

export class Option implements IOption {
    num?: number;
    name?: string | undefined;
    rate?: Rate;
    bookmakerId?: number;
    prematchRate?: PrematchRate;
    link?: string | undefined;
    trend?: number;
    oldRate?: OldRate;

    constructor(data?: IOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.num = _data["num"];
            this.name = _data["name"];
            this.rate = _data["rate"] ? Rate.fromJS(_data["rate"]) : <any>undefined;
            this.bookmakerId = _data["bookmakerId"];
            this.prematchRate = _data["prematchRate"] ? PrematchRate.fromJS(_data["prematchRate"]) : <any>undefined;
            this.link = _data["link"];
            this.trend = _data["trend"];
            this.oldRate = _data["oldRate"] ? OldRate.fromJS(_data["oldRate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Option {
        data = typeof data === 'object' ? data : {};
        let result = new Option();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["num"] = this.num;
        data["name"] = this.name;
        data["rate"] = this.rate ? this.rate.toJSON() : <any>undefined;
        data["bookmakerId"] = this.bookmakerId;
        data["prematchRate"] = this.prematchRate ? this.prematchRate.toJSON() : <any>undefined;
        data["link"] = this.link;
        data["trend"] = this.trend;
        data["oldRate"] = this.oldRate ? this.oldRate.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOption {
    num?: number;
    name?: string | undefined;
    rate?: Rate;
    bookmakerId?: number;
    prematchRate?: PrematchRate;
    link?: string | undefined;
    trend?: number;
    oldRate?: OldRate;
}

export class PrematchRate implements IPrematchRate {
    decimal?: number;
    fractional?: string | undefined;
    american?: string | undefined;

    constructor(data?: IPrematchRate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.decimal = _data["decimal"];
            this.fractional = _data["fractional"];
            this.american = _data["american"];
        }
    }

    static fromJS(data: any): PrematchRate {
        data = typeof data === 'object' ? data : {};
        let result = new PrematchRate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["decimal"] = this.decimal;
        data["fractional"] = this.fractional;
        data["american"] = this.american;
        return data;
    }
}

export interface IPrematchRate {
    decimal?: number;
    fractional?: string | undefined;
    american?: string | undefined;
}

export class Rate implements IRate {
    decimal?: number;
    fractional?: string | undefined;
    american?: string | undefined;

    constructor(data?: IRate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.decimal = _data["decimal"];
            this.fractional = _data["fractional"];
            this.american = _data["american"];
        }
    }

    static fromJS(data: any): Rate {
        data = typeof data === 'object' ? data : {};
        let result = new Rate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["decimal"] = this.decimal;
        data["fractional"] = this.fractional;
        data["american"] = this.american;
        return data;
    }
}

export interface IRate {
    decimal?: number;
    fractional?: string | undefined;
    american?: string | undefined;
}

export class RecentGame implements IRecentGame {
    id?: number;
    sportId?: number;
    competitionId?: number;
    seasonNum?: number;
    stageNum?: number;
    groupNum?: number;
    competitionDisplayName?: string | undefined;
    startTime?: Date;
    statusGroup?: number;
    statusText?: string | undefined;
    shortStatusText?: string | undefined;
    gameTimeAndStatusDisplayType?: number;
    homeCompetitor?: HomeCompetitor;
    awayCompetitor?: AwayCompetitor;
    outcome?: number;
    extraData?: ExtraDatum[] | undefined;
    winner?: number;
    scores?: number[] | undefined;
    homeAwayTeamOrder?: number;
    hasPointByPoint?: boolean;
    roundNum?: number | undefined;

    constructor(data?: IRecentGame) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sportId = _data["sportId"];
            this.competitionId = _data["competitionId"];
            this.seasonNum = _data["seasonNum"];
            this.stageNum = _data["stageNum"];
            this.groupNum = _data["groupNum"];
            this.competitionDisplayName = _data["competitionDisplayName"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
            this.statusGroup = _data["statusGroup"];
            this.statusText = _data["statusText"];
            this.shortStatusText = _data["shortStatusText"];
            this.gameTimeAndStatusDisplayType = _data["gameTimeAndStatusDisplayType"];
            this.homeCompetitor = _data["homeCompetitor"] ? HomeCompetitor.fromJS(_data["homeCompetitor"]) : <any>undefined;
            this.awayCompetitor = _data["awayCompetitor"] ? AwayCompetitor.fromJS(_data["awayCompetitor"]) : <any>undefined;
            this.outcome = _data["outcome"];
            if (Array.isArray(_data["extraData"])) {
                this.extraData = [] as any;
                for (let item of _data["extraData"])
                    this.extraData!.push(ExtraDatum.fromJS(item));
            }
            this.winner = _data["winner"];
            if (Array.isArray(_data["scores"])) {
                this.scores = [] as any;
                for (let item of _data["scores"])
                    this.scores!.push(item);
            }
            this.homeAwayTeamOrder = _data["homeAwayTeamOrder"];
            this.hasPointByPoint = _data["hasPointByPoint"];
            this.roundNum = _data["roundNum"];
        }
    }

    static fromJS(data: any): RecentGame {
        data = typeof data === 'object' ? data : {};
        let result = new RecentGame();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sportId"] = this.sportId;
        data["competitionId"] = this.competitionId;
        data["seasonNum"] = this.seasonNum;
        data["stageNum"] = this.stageNum;
        data["groupNum"] = this.groupNum;
        data["competitionDisplayName"] = this.competitionDisplayName;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["statusGroup"] = this.statusGroup;
        data["statusText"] = this.statusText;
        data["shortStatusText"] = this.shortStatusText;
        data["gameTimeAndStatusDisplayType"] = this.gameTimeAndStatusDisplayType;
        data["homeCompetitor"] = this.homeCompetitor ? this.homeCompetitor.toJSON() : <any>undefined;
        data["awayCompetitor"] = this.awayCompetitor ? this.awayCompetitor.toJSON() : <any>undefined;
        data["outcome"] = this.outcome;
        if (Array.isArray(this.extraData)) {
            data["extraData"] = [];
            for (let item of this.extraData)
                data["extraData"].push(item.toJSON());
        }
        data["winner"] = this.winner;
        if (Array.isArray(this.scores)) {
            data["scores"] = [];
            for (let item of this.scores)
                data["scores"].push(item);
        }
        data["homeAwayTeamOrder"] = this.homeAwayTeamOrder;
        data["hasPointByPoint"] = this.hasPointByPoint;
        data["roundNum"] = this.roundNum;
        return data;
    }
}

export interface IRecentGame {
    id?: number;
    sportId?: number;
    competitionId?: number;
    seasonNum?: number;
    stageNum?: number;
    groupNum?: number;
    competitionDisplayName?: string | undefined;
    startTime?: Date;
    statusGroup?: number;
    statusText?: string | undefined;
    shortStatusText?: string | undefined;
    gameTimeAndStatusDisplayType?: number;
    homeCompetitor?: HomeCompetitor;
    awayCompetitor?: AwayCompetitor;
    outcome?: number;
    extraData?: ExtraDatum[] | undefined;
    winner?: number;
    scores?: number[] | undefined;
    homeAwayTeamOrder?: number;
    hasPointByPoint?: boolean;
    roundNum?: number | undefined;
}

export class Sport implements ISport {
    id?: number;
    name?: string | undefined;
    nameForURL?: string | undefined;
    drawSupport?: boolean;
    imageVersion?: number;

    constructor(data?: ISport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.nameForURL = _data["nameForURL"];
            this.drawSupport = _data["drawSupport"];
            this.imageVersion = _data["imageVersion"];
        }
    }

    static fromJS(data: any): Sport {
        data = typeof data === 'object' ? data : {};
        let result = new Sport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["nameForURL"] = this.nameForURL;
        data["drawSupport"] = this.drawSupport;
        data["imageVersion"] = this.imageVersion;
        return data;
    }
}

export interface ISport {
    id?: number;
    name?: string | undefined;
    nameForURL?: string | undefined;
    drawSupport?: boolean;
    imageVersion?: number;
}

export class SportradarHead2HeadResponse implements ISportradarHead2HeadResponse {
    game?: Game;
    sports?: Sport[] | undefined;
    countries?: Country[] | undefined;
    competitions?: Competition[] | undefined;

    constructor(data?: ISportradarHead2HeadResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.game = _data["game"] ? Game.fromJS(_data["game"]) : <any>undefined;
            if (Array.isArray(_data["sports"])) {
                this.sports = [] as any;
                for (let item of _data["sports"])
                    this.sports!.push(Sport.fromJS(item));
            }
            if (Array.isArray(_data["countries"])) {
                this.countries = [] as any;
                for (let item of _data["countries"])
                    this.countries!.push(Country.fromJS(item));
            }
            if (Array.isArray(_data["competitions"])) {
                this.competitions = [] as any;
                for (let item of _data["competitions"])
                    this.competitions!.push(Competition.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SportradarHead2HeadResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SportradarHead2HeadResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["game"] = this.game ? this.game.toJSON() : <any>undefined;
        if (Array.isArray(this.sports)) {
            data["sports"] = [];
            for (let item of this.sports)
                data["sports"].push(item.toJSON());
        }
        if (Array.isArray(this.countries)) {
            data["countries"] = [];
            for (let item of this.countries)
                data["countries"].push(item.toJSON());
        }
        if (Array.isArray(this.competitions)) {
            data["competitions"] = [];
            for (let item of this.competitions)
                data["competitions"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISportradarHead2HeadResponse {
    game?: Game;
    sports?: Sport[] | undefined;
    countries?: Country[] | undefined;
    competitions?: Competition[] | undefined;
}

export class SportradarMatchDetailsResponse implements ISportradarMatchDetailsResponse {
    lastUpdateId?: number;
    requestedUpdateId?: number;
    ttl?: number;
    game?: Game;
    sports?: Sport[] | undefined;
    countries?: Country[] | undefined;
    competitions?: Competition[] | undefined;

    constructor(data?: ISportradarMatchDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lastUpdateId = _data["lastUpdateId"];
            this.requestedUpdateId = _data["requestedUpdateId"];
            this.ttl = _data["ttl"];
            this.game = _data["game"] ? Game.fromJS(_data["game"]) : <any>undefined;
            if (Array.isArray(_data["sports"])) {
                this.sports = [] as any;
                for (let item of _data["sports"])
                    this.sports!.push(Sport.fromJS(item));
            }
            if (Array.isArray(_data["countries"])) {
                this.countries = [] as any;
                for (let item of _data["countries"])
                    this.countries!.push(Country.fromJS(item));
            }
            if (Array.isArray(_data["competitions"])) {
                this.competitions = [] as any;
                for (let item of _data["competitions"])
                    this.competitions!.push(Competition.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SportradarMatchDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SportradarMatchDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastUpdateId"] = this.lastUpdateId;
        data["requestedUpdateId"] = this.requestedUpdateId;
        data["ttl"] = this.ttl;
        data["game"] = this.game ? this.game.toJSON() : <any>undefined;
        if (Array.isArray(this.sports)) {
            data["sports"] = [];
            for (let item of this.sports)
                data["sports"].push(item.toJSON());
        }
        if (Array.isArray(this.countries)) {
            data["countries"] = [];
            for (let item of this.countries)
                data["countries"].push(item.toJSON());
        }
        if (Array.isArray(this.competitions)) {
            data["competitions"] = [];
            for (let item of this.competitions)
                data["competitions"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISportradarMatchDetailsResponse {
    lastUpdateId?: number;
    requestedUpdateId?: number;
    ttl?: number;
    game?: Game;
    sports?: Sport[] | undefined;
    countries?: Country[] | undefined;
    competitions?: Competition[] | undefined;
}

export class SportradarResponse implements ISportradarResponse {
    lastUpdateId?: number;
    requestedUpdateId?: number;
    ttl?: number;
    sports?: Sport[] | undefined;
    countries?: Country[] | undefined;
    competitions?: Competition[] | undefined;
    competitors?: Competitor[] | undefined;
    games?: Game[] | undefined;
    bookmakers?: Bookmaker[] | undefined;

    constructor(data?: ISportradarResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lastUpdateId = _data["lastUpdateId"];
            this.requestedUpdateId = _data["requestedUpdateId"];
            this.ttl = _data["ttl"];
            if (Array.isArray(_data["sports"])) {
                this.sports = [] as any;
                for (let item of _data["sports"])
                    this.sports!.push(Sport.fromJS(item));
            }
            if (Array.isArray(_data["countries"])) {
                this.countries = [] as any;
                for (let item of _data["countries"])
                    this.countries!.push(Country.fromJS(item));
            }
            if (Array.isArray(_data["competitions"])) {
                this.competitions = [] as any;
                for (let item of _data["competitions"])
                    this.competitions!.push(Competition.fromJS(item));
            }
            if (Array.isArray(_data["competitors"])) {
                this.competitors = [] as any;
                for (let item of _data["competitors"])
                    this.competitors!.push(Competitor.fromJS(item));
            }
            if (Array.isArray(_data["games"])) {
                this.games = [] as any;
                for (let item of _data["games"])
                    this.games!.push(Game.fromJS(item));
            }
            if (Array.isArray(_data["bookmakers"])) {
                this.bookmakers = [] as any;
                for (let item of _data["bookmakers"])
                    this.bookmakers!.push(Bookmaker.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SportradarResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SportradarResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastUpdateId"] = this.lastUpdateId;
        data["requestedUpdateId"] = this.requestedUpdateId;
        data["ttl"] = this.ttl;
        if (Array.isArray(this.sports)) {
            data["sports"] = [];
            for (let item of this.sports)
                data["sports"].push(item.toJSON());
        }
        if (Array.isArray(this.countries)) {
            data["countries"] = [];
            for (let item of this.countries)
                data["countries"].push(item.toJSON());
        }
        if (Array.isArray(this.competitions)) {
            data["competitions"] = [];
            for (let item of this.competitions)
                data["competitions"].push(item.toJSON());
        }
        if (Array.isArray(this.competitors)) {
            data["competitors"] = [];
            for (let item of this.competitors)
                data["competitors"].push(item.toJSON());
        }
        if (Array.isArray(this.games)) {
            data["games"] = [];
            for (let item of this.games)
                data["games"].push(item.toJSON());
        }
        if (Array.isArray(this.bookmakers)) {
            data["bookmakers"] = [];
            for (let item of this.bookmakers)
                data["bookmakers"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISportradarResponse {
    lastUpdateId?: number;
    requestedUpdateId?: number;
    ttl?: number;
    sports?: Sport[] | undefined;
    countries?: Country[] | undefined;
    competitions?: Competition[] | undefined;
    competitors?: Competitor[] | undefined;
    games?: Game[] | undefined;
    bookmakers?: Bookmaker[] | undefined;
}

export class StringServiceResponse implements IStringServiceResponse {
    data?: string | undefined;
    success?: boolean;
    message?: string | undefined;

    constructor(data?: IStringServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.success = _data["success"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): StringServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new StringServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["success"] = this.success;
        data["message"] = this.message;
        return data;
    }
}

export interface IStringServiceResponse {
    data?: string | undefined;
    success?: boolean;
    message?: string | undefined;
}

export class UserLoginDto implements IUserLoginDto {
    emailAddress?: string | undefined;
    password?: string | undefined;

    constructor(data?: IUserLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailAddress = _data["emailAddress"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        return data;
    }
}

export interface IUserLoginDto {
    emailAddress?: string | undefined;
    password?: string | undefined;
}

export class UserRegisterDto implements IUserRegisterDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    emailAddress?: string | undefined;
    password?: string | undefined;

    constructor(data?: IUserRegisterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.emailAddress = _data["emailAddress"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserRegisterDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserRegisterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        return data;
    }
}

export interface IUserRegisterDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    emailAddress?: string | undefined;
    password?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        observer.next(JSON.stringify(blob));
        observer.complete();
    });
}