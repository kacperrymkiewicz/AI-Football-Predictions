//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: UserRegisterDto | undefined): Observable<Int32ServiceResponse> {
        let url_ = this.baseUrl + "/api/Authentication/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "json",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Int32ServiceResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Int32ServiceResponse>;
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<Int32ServiceResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Int32ServiceResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: UserLoginDto | undefined): Observable<StringServiceResponse> {
        let url_ = this.baseUrl + "/api/Authentication/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "json",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StringServiceResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StringServiceResponse>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<StringServiceResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringServiceResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Gets the list of live football matches
     * @return OK
     */
    getLiveMatches(): Observable<Match[]> {
        let url_ = this.baseUrl + "/api/Matches/Live";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "json",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLiveMatches(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLiveMatches(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Match[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Match[]>;
        }));
    }

    protected processGetLiveMatches(response: HttpResponseBase): Observable<Match[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Match.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class Area implements IArea {
    id?: number;
    name?: string | undefined;
    code?: string | undefined;
    flag?: string | undefined;

    constructor(data?: IArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.flag = _data["flag"];
        }
    }

    static fromJS(data: any): Area {
        data = typeof data === 'object' ? data : {};
        let result = new Area();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["flag"] = this.flag;
        return data;
    }
}

export interface IArea {
    id?: number;
    name?: string | undefined;
    code?: string | undefined;
    flag?: string | undefined;
}

export class AwayTeam implements IAwayTeam {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    tla?: string | undefined;
    crest?: string | undefined;

    constructor(data?: IAwayTeam) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.tla = _data["tla"];
            this.crest = _data["crest"];
        }
    }

    static fromJS(data: any): AwayTeam {
        data = typeof data === 'object' ? data : {};
        let result = new AwayTeam();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["tla"] = this.tla;
        data["crest"] = this.crest;
        return data;
    }
}

export interface IAwayTeam {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    tla?: string | undefined;
    crest?: string | undefined;
}

export class Competition implements ICompetition {
    id?: number;
    name?: string | undefined;
    code?: string | undefined;
    type?: string | undefined;
    emblem?: string | undefined;

    constructor(data?: ICompetition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.emblem = _data["emblem"];
        }
    }

    static fromJS(data: any): Competition {
        data = typeof data === 'object' ? data : {};
        let result = new Competition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["type"] = this.type;
        data["emblem"] = this.emblem;
        return data;
    }
}

export interface ICompetition {
    id?: number;
    name?: string | undefined;
    code?: string | undefined;
    type?: string | undefined;
    emblem?: string | undefined;
}

export class FullTime implements IFullTime {
    home?: number | undefined;
    away?: number | undefined;

    constructor(data?: IFullTime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.home = _data["home"];
            this.away = _data["away"];
        }
    }

    static fromJS(data: any): FullTime {
        data = typeof data === 'object' ? data : {};
        let result = new FullTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["home"] = this.home;
        data["away"] = this.away;
        return data;
    }
}

export interface IFullTime {
    home?: number | undefined;
    away?: number | undefined;
}

export class HalfTime implements IHalfTime {
    home?: number | undefined;
    away?: number | undefined;

    constructor(data?: IHalfTime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.home = _data["home"];
            this.away = _data["away"];
        }
    }

    static fromJS(data: any): HalfTime {
        data = typeof data === 'object' ? data : {};
        let result = new HalfTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["home"] = this.home;
        data["away"] = this.away;
        return data;
    }
}

export interface IHalfTime {
    home?: number | undefined;
    away?: number | undefined;
}

export class HomeTeam implements IHomeTeam {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    tla?: string | undefined;
    crest?: string | undefined;

    constructor(data?: IHomeTeam) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.tla = _data["tla"];
            this.crest = _data["crest"];
        }
    }

    static fromJS(data: any): HomeTeam {
        data = typeof data === 'object' ? data : {};
        let result = new HomeTeam();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["tla"] = this.tla;
        data["crest"] = this.crest;
        return data;
    }
}

export interface IHomeTeam {
    id?: number;
    name?: string | undefined;
    shortName?: string | undefined;
    tla?: string | undefined;
    crest?: string | undefined;
}

export class Int32ServiceResponse implements IInt32ServiceResponse {
    data?: number;
    success?: boolean;
    message?: string | undefined;

    constructor(data?: IInt32ServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.success = _data["success"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): Int32ServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new Int32ServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["success"] = this.success;
        data["message"] = this.message;
        return data;
    }
}

export interface IInt32ServiceResponse {
    data?: number;
    success?: boolean;
    message?: string | undefined;
}

export class Match implements IMatch {
    id?: number;
    status?: string | undefined;
    utcDate?: Date;
    homeTeam?: HomeTeam;
    awayTeam?: AwayTeam;
    score?: Score;
    area?: Area;
    competition?: Competition;
    season?: Season;
    matchday?: number;
    stage?: string | undefined;
    lastUpdated?: Date;

    constructor(data?: IMatch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status = _data["status"];
            this.utcDate = _data["utcDate"] ? new Date(_data["utcDate"].toString()) : <any>undefined;
            this.homeTeam = _data["homeTeam"] ? HomeTeam.fromJS(_data["homeTeam"]) : <any>undefined;
            this.awayTeam = _data["awayTeam"] ? AwayTeam.fromJS(_data["awayTeam"]) : <any>undefined;
            this.score = _data["score"] ? Score.fromJS(_data["score"]) : <any>undefined;
            this.area = _data["area"] ? Area.fromJS(_data["area"]) : <any>undefined;
            this.competition = _data["competition"] ? Competition.fromJS(_data["competition"]) : <any>undefined;
            this.season = _data["season"] ? Season.fromJS(_data["season"]) : <any>undefined;
            this.matchday = _data["matchday"];
            this.stage = _data["stage"];
            this.lastUpdated = _data["lastUpdated"] ? new Date(_data["lastUpdated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Match {
        data = typeof data === 'object' ? data : {};
        let result = new Match();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        data["utcDate"] = this.utcDate ? this.utcDate.toISOString() : <any>undefined;
        data["homeTeam"] = this.homeTeam ? this.homeTeam.toJSON() : <any>undefined;
        data["awayTeam"] = this.awayTeam ? this.awayTeam.toJSON() : <any>undefined;
        data["score"] = this.score ? this.score.toJSON() : <any>undefined;
        data["area"] = this.area ? this.area.toJSON() : <any>undefined;
        data["competition"] = this.competition ? this.competition.toJSON() : <any>undefined;
        data["season"] = this.season ? this.season.toJSON() : <any>undefined;
        data["matchday"] = this.matchday;
        data["stage"] = this.stage;
        data["lastUpdated"] = this.lastUpdated ? this.lastUpdated.toISOString() : <any>undefined;
        return data;
    }
}

export interface IMatch {
    id?: number;
    status?: string | undefined;
    utcDate?: Date;
    homeTeam?: HomeTeam;
    awayTeam?: AwayTeam;
    score?: Score;
    area?: Area;
    competition?: Competition;
    season?: Season;
    matchday?: number;
    stage?: string | undefined;
    lastUpdated?: Date;
}

export class Score implements IScore {
    winner?: string | undefined;
    duration?: string | undefined;
    fullTime?: FullTime;
    halfTime?: HalfTime;

    constructor(data?: IScore) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.winner = _data["winner"];
            this.duration = _data["duration"];
            this.fullTime = _data["fullTime"] ? FullTime.fromJS(_data["fullTime"]) : <any>undefined;
            this.halfTime = _data["halfTime"] ? HalfTime.fromJS(_data["halfTime"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Score {
        data = typeof data === 'object' ? data : {};
        let result = new Score();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["winner"] = this.winner;
        data["duration"] = this.duration;
        data["fullTime"] = this.fullTime ? this.fullTime.toJSON() : <any>undefined;
        data["halfTime"] = this.halfTime ? this.halfTime.toJSON() : <any>undefined;
        return data;
    }
}

export interface IScore {
    winner?: string | undefined;
    duration?: string | undefined;
    fullTime?: FullTime;
    halfTime?: HalfTime;
}

export class Season implements ISeason {
    id?: number;
    startDate?: string | undefined;
    endDate?: string | undefined;
    currentMatchday?: number;

    constructor(data?: ISeason) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.startDate = _data["startDate"];
            this.endDate = _data["endDate"];
            this.currentMatchday = _data["currentMatchday"];
        }
    }

    static fromJS(data: any): Season {
        data = typeof data === 'object' ? data : {};
        let result = new Season();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startDate"] = this.startDate;
        data["endDate"] = this.endDate;
        data["currentMatchday"] = this.currentMatchday;
        return data;
    }
}

export interface ISeason {
    id?: number;
    startDate?: string | undefined;
    endDate?: string | undefined;
    currentMatchday?: number;
}

export class StringServiceResponse implements IStringServiceResponse {
    data?: string | undefined;
    success?: boolean;
    message?: string | undefined;

    constructor(data?: IStringServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.success = _data["success"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): StringServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new StringServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["success"] = this.success;
        data["message"] = this.message;
        return data;
    }
}

export interface IStringServiceResponse {
    data?: string | undefined;
    success?: boolean;
    message?: string | undefined;
}

export class UserLoginDto implements IUserLoginDto {
    emailAddress?: string | undefined;
    password?: string | undefined;

    constructor(data?: IUserLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailAddress = _data["emailAddress"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        return data;
    }
}

export interface IUserLoginDto {
    emailAddress?: string | undefined;
    password?: string | undefined;
}

export class UserRegisterDto implements IUserRegisterDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    emailAddress?: string | undefined;
    password?: string | undefined;

    constructor(data?: IUserRegisterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.emailAddress = _data["emailAddress"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserRegisterDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserRegisterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        return data;
    }
}

export interface IUserRegisterDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    emailAddress?: string | undefined;
    password?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        observer.next(JSON.stringify(blob));
        observer.complete();
    });
}