// <auto-generated />
using System;
using AI.Football.Predictions.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AI.Football.Predictions.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250422220831_HistoricalMatchesMigration")]
    partial class HistoricalMatchesMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AI.Football.Predictions.API.Models.HistoricalMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayCompetitorId")
                        .HasColumnType("int");

                    b.Property<int>("HomeCompetitorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwayCompetitorId");

                    b.HasIndex("HomeCompetitorId");

                    b.ToTable("HistoricalMatches");
                });

            modelBuilder.Entity("AI.Football.Predictions.API.Models.MatchTrainingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayGoals")
                        .HasColumnType("int");

                    b.Property<float>("AwayPossession")
                        .HasColumnType("float");

                    b.Property<int>("HomeGoals")
                        .HasColumnType("int");

                    b.Property<float>("HomePossession")
                        .HasColumnType("float");

                    b.Property<uint>("MatchResult")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.ToTable("TrainingData");
                });

            modelBuilder.Entity("AI.Football.Predictions.API.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsWinner")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("AI.Football.Predictions.API.Models.TeamStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AvgGoals")
                        .HasColumnType("float");

                    b.Property<float>("BallPossession")
                        .HasColumnType("float");

                    b.Property<float>("Fouls")
                        .HasColumnType("float");

                    b.Property<float>("ShotsPerGame")
                        .HasColumnType("float");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("TeamStatistics");
                });

            modelBuilder.Entity("AI.Football.Predictions.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AI.Football.Predictions.API.Models.HistoricalMatch", b =>
                {
                    b.HasOne("AI.Football.Predictions.API.Models.Team", "AwayCompetitor")
                        .WithMany()
                        .HasForeignKey("AwayCompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI.Football.Predictions.API.Models.Team", "HomeCompetitor")
                        .WithMany()
                        .HasForeignKey("HomeCompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayCompetitor");

                    b.Navigation("HomeCompetitor");
                });

            modelBuilder.Entity("AI.Football.Predictions.API.Models.TeamStatistics", b =>
                {
                    b.HasOne("AI.Football.Predictions.API.Models.Team", null)
                        .WithOne("Statistics")
                        .HasForeignKey("AI.Football.Predictions.API.Models.TeamStatistics", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AI.Football.Predictions.API.Models.Team", b =>
                {
                    b.Navigation("Statistics")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
